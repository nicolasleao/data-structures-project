#+STARTUP: beamer
#+OPTIONS: @:t ':nil *:t -:t ::t <:t H:2 \n:nil ^:t arch:headline 
#+OPTIONS: author:t broken-links:nil c:nil creator:nil
#+OPTIONS: d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t num:t
#+OPTIONS: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+OPTIONS: timestamp:t title:t toc:t num:t todo:t |:t
#+TITLE: Segment Tree
#+DATE: https://github.com/projetosufal/data-structures-project
#+AUTHOR: Matheus Artur, Luís Alberto Cabús, Nicolas Leão, Fábio Vinícius
#+EMAIL: macc@ic.ufal.br
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 26.1 (Org mode 9.1.9)
#+LATEX_CLASS: beamer
#+COLUMNS: %45ITEM %10BEAMER_env(Env) %10BEAMER_act(Act) %4BEAMER_col(Col) %8BEAMER_opt(Opt) %10BEAMER_extra(Extra)
#+BEAMER_THEME: Hannover
#+LaTeX_CLASS_OPTIONS: [presentation,9pt]
#+BEAMER_FRAME_LEVEL: 2
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:https://orgmode.org/org-info.js

* Intro

** Stock Exchange
*** The problem                                                     :B_block:
    :PROPERTIES:
    :BEAMER_COL: 0.48
    :BEAMER_env: block
    :END:
- Data from thousands of companies worldwide, active for decades
- Usage of multiple operations requiring da range/interval of time required
- Efficiency demand

*** O(n) operations?                                                :B_block:
    :PROPERTIES:
    :BEAMER_COL: 0.48
    :BEAMER_env: block
    :END:
#+LABEL:   fig:fig1

  [[./img/serv.png]]
* Segment tree
** Segment tree
*** How it is structured? :B_block:
    :PROPERTIES:
    :BEAMER_COL: 0.48
    :BEAMER_env: block
    :END:
- The Segtree is a binary tree that's represented from a array, where each node represents a unique interval or segment of the tree and stores a *specific* value. 
- The value, is usually represented by /maximum/, /minimum/ or /sum/ of the segment.
*** Intervals of a A[6]                                             :B_block:
    :PROPERTIES:
    :BEAMER_COL: 0.48
    :BEAMER_env: block
    :END:
|----------+---+---------|
| tree[0]  | = | A[0:5] |
| tree[1]  | = | A[0:2] |
| tree[2]  | = | A[3:5] |
| tree[3]  | = | A[0:1] |
| tree[4]  | = | A[2:2] |
| tree[5]  | = | A[3:4] |
| tree[6]  | = | A[5:5] |
| tree[7]  | = | A[0:0] |
| tree[8]  | = | A[1:1] |
| tree[9]  | = | NULL    |
| tree[10] | = | NULL    |
| tree[11] | = | A[3:3] |
| tree[12] | = | A[4:4] |
|----------+---+---------|
** As tree
[[./img/segtree.jpg]]

* Operations
** Operations
*** Building a tree
- ( n log n) storage
- but only (2*n - 1) actual nodes
*** Query - range search
- O(log n)
*** Updating a tree
- O(log n)
- can modify any [l:r] section, than it will propagate updating dependencies
** Building a Segtree
#+BEGIN_EXAMPLE c
void
buildtree(int (*f)(int l_num, int r_num), int *v, int *tree,
	  int *t_size, int node, int min, int max)
{
  int mid;
  
  if(min == max)
    tree[node] = v[min];

  else
    {
      mid = (min+max)/2;
      
      buildtree((*f), v, tree, t_size, 2*node + 1, min , mid);
      buildtree((*f), v, tree, t_size, 2*node + 2, mid + 1 , max);
      tree[node] = (*f)(tree[2*node +1], tree[2*node + 2]);
    }
}
#+END_EXAMPLE
** Query 
#+BEGIN_EXAMPLE c
int
query(int (*f)(int l_num, int r_num), int *tree,
      int node, int min, int max, int l, int r)
{
  if(r < min || max < l)
    return 0;
  
  if(l <= min && max <= r)
    return tree[node];
  
  int mid, l_bipod, r_bipod;  
  mid = (min+max)/2;
  
  l_bipod = query((*f), tree, 2*node + 1, min , mid, l , r);
  r_bipod = query((*f), tree, 2*node + 2, mid + 1 , max, l, r);
  return((*f)(l_bipod, r_bipod));
}
#+END_EXAMPLE
** Update
#+BEGIN_EXAMPLE c
void
updatetree(int (*f)(int l_num, int r_num), int *tree,
	   int node, int min, int max, int l, int r, int val)
{
  int mid;
  if(min > max || min > r || max < l)
    return ;
  
  if(min == max)
    {
      tree[node] = val;
      return;
    }
  
  mid = (min+max)/2;
      
  updatetree((*f), tree, 2*node + 1, min , mid, l, r, val);
  updatetree((*f), tree, 2*node + 2, mid + 1 , max, l, r, val);
  
  tree[node] = (*f)(tree[2*node +1], tree[2*node + 2]);
}
#+END_EXAMPLE
